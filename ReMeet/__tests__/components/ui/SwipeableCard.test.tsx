import React from 'react';
import { fireEvent, act } from '@testing-library/react-native';
import { SwipeableCard } from '@/components/ui/SwipeableCard';
import { render } from '@/test-utils/test-utils';
import type { PersonWithRelations } from '@/database/sqlite-types';
import { useSetAtom } from 'jotai';
import { openedMenuIdAtom } from '@/atoms/peopleAtoms';

/**
 * SwipeableCard„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„ÉÜ„Çπ„Éà
 */

// „ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø
const mockPerson: PersonWithRelations = {
  id: 'test-person-1',
  name: '„ÉÜ„Çπ„ÉàÂ§™ÈÉé',
  handle: '@test_taro',
  company: '„ÉÜ„Çπ„ÉàÊ†™Âºè‰ºöÁ§æ',
  position: '„Ç®„É≥„Ç∏„Éã„Ç¢',
  description: '„ÉÜ„Çπ„ÉàÁî®„ÅÆ„É¶„Éº„Ç∂„Éº„Åß„Åô',
  productName: '„ÉÜ„Çπ„Éà„Ç¢„Éó„É™',
  memo: '„ÉÜ„Çπ„Éà„É°„É¢',
  githubId: 'test-taro',
  createdAt: new Date('2025-01-01'),
  updatedAt: new Date('2025-01-01'),
  tags: [
    { id: 'tag-1', name: 'React' },
    { id: 'tag-2', name: 'TypeScript' },
  ],
  events: [
    { 
      id: 'event-1', 
      name: 'React Conference 2024', 
      date: new Date('2024-12-01'), 
      location: 'Êù±‰∫¨ÂõΩÈöõ„Éï„Ç©„Éº„É©„É†' 
    },
  ],
  relations: [],
};

describe('SwipeableCard', () => {
  const mockOnPress = jest.fn();
  const mockOnDelete = jest.fn();
  const mockOnHide = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Âü∫Êú¨Ë°®Á§∫', () => {
    it('‰∫∫Áâ©„ÅÆÂü∫Êú¨ÊÉÖÂ†±„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const { getByText } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      expect(getByText('„ÉÜ„Çπ„ÉàÂ§™ÈÉé')).toBeTruthy();
      expect(getByText('React')).toBeTruthy();
      expect(getByText('TypeScript')).toBeTruthy();
      expect(getByText('üìÖ React Conference 2024')).toBeTruthy();
      expect(getByText('üìç Êù±‰∫¨ÂõΩÈöõ„Éï„Ç©„Éº„É©„É†')).toBeTruthy();
    });

    it('„Çø„Ç∞„Åå„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const personWithoutTags = { ...mockPerson, tags: [] };
      
      const { getByText, queryByText } = render(
        <SwipeableCard
          person={personWithoutTags}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      expect(getByText('„ÉÜ„Çπ„ÉàÂ§™ÈÉé')).toBeTruthy();
      expect(queryByText('React')).toBeNull();
      expect(queryByText('TypeScript')).toBeNull();
    });

    it('„Ç§„Éô„É≥„Éà„Åå„Å™„ÅÑÂ†¥Âêà„Åß„ÇÇÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const personWithoutEvents = { ...mockPerson, events: [] };
      
      const { getByText, queryByText } = render(
        <SwipeableCard
          person={personWithoutEvents}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      expect(getByText('„ÉÜ„Çπ„ÉàÂ§™ÈÉé')).toBeTruthy();
      expect(queryByText('üìÖ React Conference 2024')).toBeNull();
    });
  });

  describe('„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥', () => {
    it('„Ç´„Éº„Éâ„Çø„ÉÉ„ÉóÊôÇ„Å´onPress„ÅåÂëº„Å∞„Çå„Çã', () => {
      const { getByTestId } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      const card = getByTestId(`card-${mockPerson.id}`);
      fireEvent.press(card);

      expect(mockOnPress).toHaveBeenCalledTimes(1);
    });

    it('ÈÅ©Âàá„Å™testID„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Çã', () => {
      const { getByTestId } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      expect(getByTestId(`swipeable-card-${mockPerson.id}`)).toBeTruthy();
      expect(getByTestId(`card-${mockPerson.id}`)).toBeTruthy();
      expect(getByTestId(`delete-button-${mockPerson.id}`)).toBeTruthy();
    });

    it('onHide„ÅåÊèê‰æõ„Åï„Çå„ÅüÂ†¥Âêà„ÅØÈùûË°®Á§∫„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const { getByTestId } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
          onHide={mockOnHide}
        />
      );

      expect(getByTestId(`hide-button-${mockPerson.id}`)).toBeTruthy();
    });

    it('onHide„ÅåÊèê‰æõ„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅØÈùûË°®Á§∫„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ', () => {
      const { queryByTestId } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      expect(queryByTestId(`hide-button-${mockPerson.id}`)).toBeNull();
    });
  });

  describe('ÊúÄÂ∞èÈôê„ÅÆ„Éá„Éº„Çø„Åß„ÅÆË°®Á§∫', () => {
    it('ÂêçÂâç„ÅÆ„Åø„ÅÆ‰∫∫Áâ©„Éá„Éº„Çø„Åß„ÇÇÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã', () => {
      const minimalPerson: PersonWithRelations = {
        id: 'minimal-person',
        name: 'ÊúÄÂ∞è„Éá„Éº„Çø',
        handle: null,
        company: null,
        position: null,
        description: null,
        productName: null,
        memo: null,
        githubId: null,
        createdAt: new Date(),
        updatedAt: new Date(),
        tags: [],
        events: [],
        relations: [],
      };

      const { getByText } = render(
        <SwipeableCard
          person={minimalPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      expect(getByText('ÊúÄÂ∞è„Éá„Éº„Çø')).toBeTruthy();
    });
  });

  describe('Jotai„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ', () => {
    it('ÂâäÈô§„Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åü„Å®„Åç„Å´onDelete„ÅåÂëº„Å∞„Çå„Çã', () => {
      const { getByTestId } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
        />
      );

      const deleteButton = getByTestId(`delete-button-${mockPerson.id}`);
      fireEvent.press(deleteButton);

      expect(mockOnDelete).toHaveBeenCalledTimes(1);
    });

    it('ÈùûË°®Á§∫„Éú„Çø„É≥„ÅåÊäº„Åï„Çå„Åü„Å®„Åç„Å´onHide„ÅåÂëº„Å∞„Çå„Çã', () => {
      const { getByTestId } = render(
        <SwipeableCard
          person={mockPerson}
          onPress={mockOnPress}
          onDelete={mockOnDelete}
          onHide={mockOnHide}
        />
      );

      const hideButton = getByTestId(`hide-button-${mockPerson.id}`);
      fireEvent.press(hideButton);

      expect(mockOnHide).toHaveBeenCalledTimes(1);
    });
  });
});